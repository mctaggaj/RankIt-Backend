/// <reference path="../Typings/typings.d.ts" />
var App;
(function (App) {
    App.moduleId = "App";
    App.baseUrl = "/src/";
})(App || (App = {}));

/// <reference path="../AppGlobals.ts" />
var App;
(function (App) {
    var Shell;
    (function (Shell) {
        Shell.moduleId = App.moduleId + ".Shell";
        Shell.baseUrl = App.baseUrl + "Shell/";
    })(Shell = App.Shell || (App.Shell = {}));
})(App || (App = {}));

/// <reference path="ShellGlobals.ts" />
var App;
(function (App) {
    var Shell;
    (function (Shell) {
        var ShellController = (function () {
            function ShellController($scope) {
                $scope.message = "Hello World!!";
            }
            ShellController.controllerName = "ShellController";
            ShellController.moduleId = Shell.moduleId + ShellController.controllerName;
            ShellController.$inject = ["$scope"];
            return ShellController;
        })();
        Shell.ShellController = ShellController;
        angular.module(ShellController.moduleId, []).controller(ShellController.controllerName, ShellController);
    })(Shell = App.Shell || (App.Shell = {}));
})(App || (App = {}));

/// <reference path="ShellGlobals.ts" />
/// <reference path="ShellController.ts" />
var App;
(function (App) {
    var Shell;
    (function (Shell) {
        angular.module(Shell.moduleId, [Shell.ShellController.moduleId]);
    })(Shell = App.Shell || (App.Shell = {}));
})(App || (App = {}));

/// <reference path="../AppGlobals.ts" />
var App;
(function (App) {
    var Home;
    (function (Home) {
        Home.moduleId = App.moduleId + ".Home";
        Home.baseUrl = App.baseUrl + "Home/";
    })(Home = App.Home || (App.Home = {}));
})(App || (App = {}));

/// <reference path="HomeGlobals.ts" />
var App;
(function (App) {
    var Home;
    (function (Home) {
        var HomeController = (function () {
            function HomeController($scope) {
                $scope.message = "Hello World!!";
            }
            HomeController.controllerName = "HomeController";
            HomeController.moduleId = Home.moduleId + HomeController.controllerName;
            HomeController.$inject = ["$scope"];
            return HomeController;
        })();
        Home.HomeController = HomeController;
        angular.module(HomeController.moduleId, []).controller(HomeController.controllerName, HomeController).config(["$routeProvider", function ($routeProvider) {
            $routeProvider.when("/home", {
                templateUrl: Home.baseUrl + 'home.html',
                controller: HomeController.controllerName
            }).otherwise({
                redirectTo: '/home'
            });
        }]);
    })(Home = App.Home || (App.Home = {}));
})(App || (App = {}));

/// <reference path="HomeGlobals.ts" />
/// <reference path="HomeController.ts" />
var App;
(function (App) {
    var Home;
    (function (Home) {
        angular.module(Home.moduleId, [Home.HomeController.moduleId]);
    })(Home = App.Home || (App.Home = {}));
})(App || (App = {}));

/// <reference path="AppGlobals.ts"/>
/// <reference path="Shell/ShellModule.ts"/>
/// <reference path="Home/HomeModule.ts"/>
var App;
(function (App) {
    angular.module(App.moduleId, ["ui.bootstrap", "ngRoute", "app-partials", App.Shell.moduleId, App.Home.moduleId]);
})(App || (App = {}));

//# sourceMappingURL=data:application/json;base64,